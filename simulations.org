#+title XPCI Simulations for H-He demixing
#+author: Carsten Fortmann-Grote, Juncheng E
#+date: [2025-03-21 Fri] 
#+property: header-args:python :session remote_py :dir /sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing :async yes

* Preliminaries
:PROPERTIES:
:ID:       726e4058-e549-49e6-b654-8e9f39d6fed0
:END:
:PROPERTIES:
:ID:       0701dfac-8354-4bc7-ac23-2add285d21c3
#+header-args:python :session remote_py :dir /sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing :async yes
#+header-args:shell :session remote_bash :dir /sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing :async yes:END:
#+name: setenv
#+begin_src bash :session remote_bash
  hostname
  pwd
  source ~/miniforge3/bin/activate xpcisim
#+end_src

#+RESULTS: setenv
| micropop133                                    |
| /home/grotec/Repositories/XPCISims4HHeDemixing |

#+begin_src emacs-lisp
(setq org-babel-python-command "/scratch/grotec/mambaforge/envs/xpcisim/bin/python")
#+end_src

#+RESULTS:
: /scratch/grotec/mambaforge/envs/xpcisim/bin/python

* Prerequisits
:PROPERTIES:
:ID:       663cda8a-165b-44d5-ace9-125c9618846f
:END:
** Imports
:PROPERTIES:
:ID:       a55ab8aa-bb3c-4cf4-a9a7-c8e965b0a159
:END:
#+name: imports
#+begin_src python :results output
  from syris.bodies.base import CompositeBody
  from syris.bodies.isosurfaces import MetaBall
  from syris.bodies.mesh import Mesh, make_cube
  from syris.bodies.simple import make_sphere
  from syris.geometry import Trajectory
  from syris.materials import Material
  from syris.materials import make_fromfile
  from syris.materials import make_henke
  from syris.physics import propagate
  import argparse
  import matplotlib.pyplot as plt
  import numpy; np=numpy
  import os
  import quantities as q
  import scipy.misc
  import syris
  import syris.geometry as geom
  import sys
  print("imports done")
#+end_src

#+RESULTS[bfbd2653789ec380db07fbb1091e9d012c76be6f]: imports
: <string>:16: DeprecationWarning: scipy.misc is deprecated and will be removed in 2.0.0
: imports done


* Run the simple example from syris github homepage
:PROPERTIES:
:ID:       d7524133-36be-488f-b8c6-283720be77b7
:END:
#+name: syris-example
#+begin_src python :results file link :file syris.pmma.sphere.png :var filename="syris.pmma.sphere.png" :cache no
  syris.init()
  energies = np.arange(10, 30) * q.keV
  number_of_pixels = 1024
  pixel_size = 0.4 * q.um
  distance = 2 * q.m
  material = make_henke('PMMA', energies)

  sample = make_sphere(number_of_pixels, number_of_pixels / 4 * pixel_size, pixel_size, material=material)
  image = propagate([sample], (number_of_pixels, number_of_pixels), energies, distance, pixel_size).get()
  plt.imshow(image)
  plt.savefig(filename)
#+end_src

#+RESULTS: syris-example
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/syris.pmma.sphere.png]]


* Now go play
:PROPERTIES:
:ID:       7a4c8b39-3082-44bd-93d7-a59eb23fe089
:END:

** Understand the materials interface: Create a sample with given optical properties
:PROPERTIES:
:ID:       603b788f-422c-46d9-bad8-731b46b1ea2a
:END:

*** Homogeneous ball of liquid HeH
:PROPERTIES:
:ID:       9ea1a689-4185-43e5-b0e4-1de81497e28c
:END:
#+name: materials
#+begin_src python
  energies = numpy.linspace(10.0, 15.0, 64) * q.keV

  name = "HeH_homo"
  delta = numpy.ones_like(energies) * 1.e-6
  beta = numpy.ones_like(energies) * 0.0


  epsilon = delta + beta * 1j

  HeH_homo = Material(name=name,
                      refractive_indices=epsilon, energies=energies)

  HeH_homo_sphere = make_sphere(number_of_pixels, number_of_pixels/4*pixel_size, pixel_size, material=HeH_homo)
#+end_src

#+RESULTS[114226bf5d4187967f60814b5ba4c6afd965c9c5]: materials
: None
*** Function to propagate through a given sample
:PROPERTIES:
:ID:       c2a8a888-dee9-4fe0-9440-32dd3cb724a6
:END:
#+name: syris.get_signal
#+begin_src python :export code 
  def get_signal(samples, npx, npy, energies, distance, ps, imgfname):
      signal = propagate(samples, (npx, npy), energies, distance, ps).get()

      plt.imshow(signal)
      plt.savefig(imgfname)

      return imgfname
#+end_src

#+RESULTS[20970dd8fea3f424d9a0a593e9eea499c8ebfa5c]: syris.get_signal
: None

#+name: test_get_signal
#+begin_src python :results output file link
  fname = get_signal([HeH_homo_sphere], number_of_pixels, number_of_pixels, energies, distance, pixel_size, 'test.png')
  print(fname)
#+end_src

#+RESULTS[eb30b4fd54311d8f9fbeec12d50b1a1cde194d37]: test_get_signal
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/test.png]]


*** Cube
:PROPERTIES:
:ID:       6093d616-d47f-48b2-8dce-9935f05d01b8
:END:
We'll setup a cube consisting of Nx * Ny * Nz subcubes. Each cube will get an assigned refractive index.

#+name: simple_cube
#+begin_src python :results value file
  # Get a cubic mesh.
  mesh_1 = make_cube().magnitude * number_of_pixels/32 * pixel_size

  # Dummy trajectory to keep the cube at its place.
  tr = Trajectory((0,0)*pixel_size, velocity=0*q.um/q.s)

  # Assemble the sample, assign material properties.
  sample_1 = Mesh(mesh_1, trajectory=tr, material=HeH_homo)

  # Field of view
  fov = number_of_pixels * pixel_size

  # Translate to center of f.o.v.
  translation = (fov.simplified.magnitude / 2.0, fov.simplified.magnitude / 2.0, 0) * q.m
  sample_1.translate(translation)

  # Get signal.
  get_signal([sample_1], number_of_pixels, number_of_pixels, energies, distance, pixel_size, 'cube.png')
#+end_src

#+RESULTS: simple_cube
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/cube.png]]

*** 4 Cubes
:PROPERTIES:
:ID:       6093d616-d47f-48b2-8dce-9935f05d01b8
:END:
We'll setup a cube consisting of Nx * Ny * Nz subcubes. Each cube will get an assigned refractive index.

#+name: 4_cubes
#+begin_src python :results value file link w/
  delta_vals = [1e-3, 1e-6]
  beta = 1e-10

  materials = [Material(name='mat1',
                        refractive_indices = numpy.ones_like(energies.magnitude) * delta_val + beta * 1j,
                        energies = energies)
               for delta_val in delta_vals]


  fov = number_of_pixels * pixel_size
  center = (fov.simplified.magnitude / 2.0, fov.simplified.magnitude / 2.0, 0) * q.m

  samples = []
  cube_dimension = number_of_pixels/32 * pixel_size
  for i in range(4):
      mesh = make_cube().magnitude * cube_dimension

      tr = Trajectory((0,0)*pixel_size, velocity=0*q.um/q.s)

      sample = Mesh(mesh, trajectory=tr, material=HeH_homo)
      # sample = Mesh(mesh, trajectory=tr, material=materials[0])

      translation = center + ((i-2) * cube_dimension.magnitude, 0, 0)*q.um
      sample.translate(translation)

      samples.append(sample)


  get_signal(samples, number_of_pixels, number_of_pixels, energies, distance, pixel_size, '4cubes.png')
#+end_src

#+RESULTS: 4_cubes
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/4cubes.png]]

*** 3 Cubes
:PROPERTIES:
:ID:       6093d616-d47f-48b2-8dce-9935f05d01b8
:END:
We'll setup a cube consisting of Nx * Ny * Nz subcubes. Each cube will get an assigned refractive index.

#+name: 3_cubes
#+begin_src python :results value file link w/
  delta_vals = [1e-3, 1e-6]
  beta = 1e-10

  materials = [Material(name='mat1',
                        refractive_indices = numpy.ones_like(energies.magnitude) * delta_val + beta * 1j,
                        energies = energies)
               for delta_val in delta_vals]


  fov = number_of_pixels * pixel_size
  center = (fov.simplified.magnitude / 2.0, fov.simplified.magnitude / 2.0, 0) * q.m

  samples = []
  cube_dimension = number_of_pixels/32 * pixel_size
  for i in range(3):
      mesh = make_cube().magnitude * cube_dimension

      tr = Trajectory((0,0)*pixel_size, velocity=0*q.um/q.s)

      sample = Mesh(mesh, trajectory=tr, material=HeH_homo)
      # sample = Mesh(mesh, trajectory=tr, material=materials[0])

      translation = center + ((i-1) * cube_dimension.magnitude, 0, 0)*q.um
      sample.translate(translation)

      samples.append(sample)


  get_signal(samples, number_of_pixels, number_of_pixels, energies, distance, pixel_size, '3cubes.png')
#+end_src

#+RESULTS: 3_cubes
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/3cubes.png]]

*** 2 Cubes, same material
:PROPERTIES:
:ID:       6093d616-d47f-48b2-8dce-9935f05d01b8
:END:

#+name: 2_cubes_same
#+begin_src python :results value file link
  delta_vals = [1e-6, 1e-6]
  beta = 1e-10

  materials = [Material(name='mat1',
                        refractive_indices = numpy.ones_like(energies.magnitude) * delta_val + beta * 1j,
                        energies = energies)
               for delta_val in delta_vals]


  fov = number_of_pixels * pixel_size
  center = (fov.simplified.magnitude / 2.0, fov.simplified.magnitude / 2.0, 0) * q.m

  samples = []
  cube_dimension = number_of_pixels/32 * pixel_size
  number_of_samples = 2
  for i in range(2):
      mesh = make_cube().magnitude * cube_dimension

      tr = Trajectory((0,0)*pixel_size, velocity=0*q.um/q.s)

      material=materials[i % len(materials)]
      sample = Mesh(mesh, trajectory=tr, material=material)

      # translation = center + ((i-number_of_samples//2) * 2 * cube_dimension.magnitude, 0, 0)*q.um
      translation = center + ((-1)**i * 1.0 * cube_dimension.magnitude, 0, 0)*q.um
      print(sample, material, translation)
      sample.translate(translation)

      samples.append(sample)


  get_signal(samples, number_of_pixels, number_of_pixels, energies, distance, pixel_size, '2cubes.png')
#+end_src

#+RESULTS: 2_cubes_same
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/2cubes.png]]

*** 1 quader
:PROPERTIES:
:ID:       6093d616-d47f-48b2-8dce-9935f05d01b8
:END:

#+name: quad
#+begin_src python :results value file link
  delta_vals = [1e-6, 1e-6]
  beta = 1e-10

  materials = [Material(name='mat1',
                        refractive_indices = numpy.ones_like(energies.magnitude) * delta_val + beta * 1j,
                        energies = energies)
               for delta_val in delta_vals]


  fov = number_of_pixels * pixel_size
  center = (fov.simplified.magnitude / 2.0, fov.simplified.magnitude / 2.0, 0) * q.m

  samples = []
  cube_dimension = number_of_pixels/32 * pixel_size
  number_of_samples = 1
  stretch_array = numpy.array([[2,1,1]]*36).T
  for i in range(number_of_samples):
      mesh = make_cube().magnitude * stretch_array * cube_dimension

      tr = Trajectory((0,0)*pixel_size, velocity=0*q.um/q.s)

      material=materials[i % len(materials)]
      sample = Mesh(mesh, trajectory=tr, material=material)

      # translation = center + ((i-number_of_samples//2) * 2 * cube_dimension.magnitude, 0, 0)*q.um
      translation = center + ((-1)**i * 0.5 * cube_dimension.magnitude, 0, 0)*q.um
      print(sample, material, translation)
      sample.translate(translation)

      samples.append(sample)


  get_signal(samples, number_of_pixels, number_of_pixels, energies, distance, pixel_size, 'quad.png')
#+end_src


#+RESULTS: quad
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/quad.png]]

Same as 2 cubes side by side

*** 2 Cubes, different material
:PROPERTIES:
:ID:       6093d616-d47f-48b2-8dce-9935f05d01b8
:END:

#+name: 2_cubes_diff
#+begin_src python :results value file link
  delta_vals = [1e-5, 1e-6]
  beta = 1e-10

  materials = [Material(name='mat_{0:.3e}'.format(delta_val),
                        refractive_indices = numpy.ones_like(energies.magnitude) * delta_val + beta * 1j,
                        energies = energies)
               for delta_val in delta_vals]


  fov = number_of_pixels * pixel_size
  center = (fov.simplified.magnitude / 2.0, fov.simplified.magnitude / 2.0, 0) * q.m

  samples = []
  cube_dimension = number_of_pixels/32 * pixel_size
  number_of_samples = 2
  for i in range(number_of_samples):
      mesh = make_cube().magnitude * cube_dimension

      tr = Trajectory((0,0)*pixel_size, velocity=0*q.um/q.s)

      material=materials[i % len(materials)]
      sample = Mesh(mesh, trajectory=tr, material=material)

      translation = center + ((-1)**i * 1 * cube_dimension.magnitude, 0, 0)*q.um
      print(sample, material, translation)
      sample.translate(translation)

      samples.append(sample)

  get_signal(samples, number_of_pixels, number_of_pixels, energies, distance, pixel_size, '2cubes_diff.png')
#+end_src

#+RESULTS: 2_cubes_diff
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/2cubes_diff.png]]




* Syris Examples
:PROPERTIES:
:ID:       c2ce59b8-8da0-4053-9f6f-53964e989c46
:END:
** Composite body example from syris documentation https://github.com/ufo-kit/syris/blob/9f409ef51cbf166cdcd43d328d28b8b30372b8ee/examples/composite_body.py
:PROPERTIES:
:ID:       adc2001b-c1f7-47b0-ac88-94f4b25e1772
:END:

#+begin_src python :results value file link 
  from syris.bodies.base import CompositeBody
  from syris.bodies.isosurfaces import MetaBall
  from syris.bodies.mesh import make_cube, Mesh
  from syris.geometry import Trajectory
  import matplotlib.pyplot as plt
  import numpy as np
  import os
  import quantities as q
  import scipy.misc
  import syris
  import syris.geometry as geom
  import os
  import argparse
  import matplotlib.pyplot as plt
  from syris.materials import make_fromfile



  def get_default_parser(description):
      """Default argument parser with *description*"""
      return argparse.ArgumentParser(
          description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter
      )


  def show(image, title=""):
      """Show *image* with *title* on its own figure."""
      plt.figure()
      image = plt.imshow(image)
      plt.title(title)
      plt.colorbar()
      plt.show(block=False)

      return image

  def make_circle(n=128, axis="z", overall_angle=None, phase_shift=None):
    """Axis specifies the axis of rotation, which can be 'x', 'y' or 'z'."""
    if overall_angle is None:
        overall_angle = 2 * np.pi * q.rad
    if phase_shift is None:
        phase_shift = 0 * q.rad
    t = np.linspace(
        phase_shift.rescale(q.rad).magnitude,
        (phase_shift + overall_angle).rescale(q.rad).magnitude,
        n,
    )
    a = np.cos(t)
    b = np.sin(t)
    c = np.zeros(n)

    if axis == "z":
        x = a
        y = b
        z = c
    elif axis == "y":
        x = a
        z = b
        y = c
    elif axis == "x":
        y = a
        z = b
        x = c

    return list(zip(x, y, z)) * q.mm


  def get_material(name):
      """Load material from file *name*."""
      return make_fromfile(os.path.join(os.path.dirname(__file__), "data", name))
  def show(image, title=""):
      """Show *image* with *title* on its own figure."""
      plt.figure()
      image = plt.imshow(image)
      plt.title(title)
      plt.colorbar()
      plt.show(block=False)

      return image


  def get_material(name):
      """Load material from file *name*."""
      return make_fromfile(os.path.join(os.path.dirname(__file__), "data", name))


  def make_triangle(n=128):
      x = np.linspace(0, 2, n, endpoint=False)
      y = np.abs(x - 1)
      z = np.zeros(n)

      return list(zip(x, y, z)) * q.mm


  def make_power_2(n=128):
      x = np.linspace(0, 1, n, endpoint=False)
      y = x ** 2
      z = np.zeros(n)

      return list(zip(x, y, z)) * q.mm


  def make_circle(n=128, axis="z", overall_angle=None, phase_shift=None):
      """Axis specifies the axis of rotation, which can be 'x', 'y' or 'z'."""
      if overall_angle is None:
          overall_angle = 2 * np.pi * q.rad
      if phase_shift is None:
          phase_shift = 0 * q.rad
      t = np.linspace(
          phase_shift.rescale(q.rad).magnitude,
          (phase_shift + overall_angle).rescale(q.rad).magnitude,
          n,
      )
      a = np.cos(t)
      b = np.sin(t)
      c = np.zeros(n)

      if axis == "z":
          x = a
          y = b
          z = c
      elif axis == "y":
          x = a
          z = b
          y = c
      elif axis == "x":
          y = a
          z = b
          x = c

      return list(zip(x, y, z)) * q.mm


  def make_sine(n=128, x_ends=(0, 1) * q.mm, y_ends=(0, 1) * q.mm):
      x_ends = x_ends.simplified.magnitude
      y_ends = y_ends.simplified.magnitude
      t = np.linspace(0, 2 * np.pi, n)
      x = np.linspace(x_ends[0], x_ends[1], n)
      amplitude = (y_ends[1] - y_ends[0]) / 2
      y = (1 + np.sin(t)) * amplitude + y_ends[0]
      z = np.zeros(n)

      return list(zip(x, y, z)) * q.m


  def get_ds(points):
      d_points = np.gradient(points)[1]

      return np.sqrt(np.sum(d_points ** 2, axis=0))


  def get_diffs(obj, ps, units=q.um, do_plot=True):
      times = [0 * q.s]
      t = 0 * q.s

      while t is not None:
          t = obj.get_next_time(t, ps)
          if t is None or t.magnitude == np.inf:
              break
          times.append(t.simplified.magnitude)

      times = times * q.s
      points = np.array(
          list(zip(*[obj.trajectory.get_point(tt).rescale(q.um).magnitude for tt in times]))
      )
      dt = np.gradient(times)

      plt.figure()
      plt.plot(get_ds(points))
      plt.title("ds")

      plt.figure()
      plt.plot(dt)
      plt.title("dt")

      plt.figure()
      plt.plot(get_ds(points) / dt * 1e-3)
      plt.title("Speed [mm / s]")
      plt.ylim(0, 2)

      if do_plot:
          d_points = np.abs(np.gradient(points)[1])
          max_all = np.max(d_points, axis=0)
          plt.figure()
          plt.plot(max_all)
          plt.title("Max shift, should be < {}".format(ps))

          max_dx = max(d_points[0])
          max_dy = max(d_points[1])
          max_dz = max(d_points[2])
          print("Maxima: {}, {}, {}".format(max_dx, max_dy, max_dz))

      return times, points


  def create_sample(n, ps, radius=None, velocity=None, x_ends=None, y_ends=None):
      """Crete a metaball with a sine trajectory."""
      fov = n * ps
      if radius is None:
          radius = n / 16 * ps
      if x_ends is None:
          radius_m = radius.simplified.magnitude
          fov_m = fov.simplified.magnitude
          x_ends = (radius_m, fov_m - radius_m) * q.m
      if y_ends is None:
          y_ends = (n / 4, 3 * n / 4) * ps

      cp = make_sine(n=32, x_ends=x_ends, y_ends=y_ends)
      if velocity is None:
          velocity = 1 * q.mm / q.s
      tr = Trajectory(cp, velocity=velocity)
      mb = MetaBall(tr, radius)

      return mb

  def _make_metaballs(args):
      metaballs = []
      radius = args.n / 16.0
      shift = 3 * radius
      for i in range(-1, 2):
          dx = i * 3 * radius
          for j in range(-1, 2):
              index = (i + 1) * 3 + (j + 1)
              # Scale the metaballs to be [0.5, 1.0] radius large.
              coeff = 0.5 + 0.5 / 8 * index
              current_radius = coeff * radius
              dy = j * 3 * radius
              traj = Trajectory([(shift + dx, shift + dy, 0)] * args.ps, pixel_size=args.ps)
              metaballs.append(MetaBall(traj, current_radius * args.ps))

      return metaballs


  def make_manual_sequence(args):
      metaballs = _make_metaballs(args)
      traj = Trajectory([(args.n / 2.0, args.n / 2.0, 0)] * args.ps, pixel_size=args.ps)
      composite = CompositeBody(traj, bodies=metaballs)
      # Move the sub-bodies relative to the composite body and also move the composite body to the
      # center of the image.
      composite.move(0 * q.s)

      im = None
      d_angle = 10 * q.deg
      fmt = "Projection at rotation {:>9}"
      # Rotate around 360 deg
      for i in range(int((360 * q.deg / d_angle).magnitude) + 1):
          p = composite.project(args.shape, args.ps).get()
          if im is None:
              im = show(p, title=fmt.format(i * d_angle))
          else:
              im.axes.set_title(fmt.format(i * d_angle))
              im.set_data(p)
          plt.draw()
          # Rotation takes care of the relative rotation of the sub-bodies around the composite body.
          composite.rotate(d_angle, geom.Z_AX)

      plt.show()


  def make_trajectory_sequence(args):
      # Make a small circle (1 / 10 of the pixel size), so that the composite body only rotates and
      # does not translate. Put this circle in the middle of the image.
      circle = args.n / 2 * args.ps + make_circle(n=1024).magnitude * args.ps / 10
      traj = Trajectory(circle, velocity=args.ps / q.s, pixel_size=args.ps)
      metaballs = _make_metaballs(args)
      composite = CompositeBody(traj, bodies=metaballs)

      im = None
      d_angle = 10 * q.deg
      fmt = "Projection at rotation {:>9}"
      # Rotate around 360 deg
      for i, t in enumerate(np.linspace(0, traj.time.simplified.magnitude, 37) * q.s):
          # Reset transformation matrices
          composite.clear_transformation()
          # Move to the desired position, i.e. around the circle and then each metaball moves relative
          # to the composite body.
          composite.move(t)
          p = composite.project(args.shape, args.ps).get()
          if im is None:
              im = show(p, title=fmt.format(i * d_angle))
          else:
              im.axes.set_title(fmt.format(i * d_angle))
              im.set_data(p)
          plt.draw()

      plt.show()


  def make_complex_trajectory_sequence(args):
      edge = 20
      x = np.linspace(0, args.n / 2 - args.n / 4 - edge - 5, num=10)
      y = z = np.zeros(x.shape)
      # Move along x axis
      traj_x = Trajectory(list(zip(x, y, z)) * args.ps, velocity=args.ps / q.s, pixel_size=args.ps)
      # Move along y axis
      traj_y = Trajectory(list(zip(y, x, z)) * args.ps, velocity=args.ps / q.s, pixel_size=args.ps)
      # Move along both x and y axes
      traj_xy = Trajectory(list(zip(x, x, z)) * args.ps, velocity=args.ps / q.s, pixel_size=args.ps)
      # Circular trajectory of the composite body rotates around the image center and with radius
      # n / 4 pixels.
      circle = args.n / 2 * args.ps + make_circle().magnitude * args.n / 4 * args.ps
      traj_circle = Trajectory(circle, velocity=args.ps / q.s, pixel_size=args.ps)
      # Make the trajectory of the circle the same duration as the simple linear one.
      traj_circle = Trajectory(circle, velocity=traj_circle.length / traj_xy.length * args.ps / q.s)
      # three cubes in the same height and depth, shifted only along the x axis.
      traj_stationary = Trajectory([(0, 0, 0)] * args.ps)
      traj_stationary_1 = Trajectory([(-2 * edge, 0, 0)] * args.ps)
      traj_stationary_2 = Trajectory([(2 * edge, 0, 0)] * args.ps)

      cube = make_cube() / q.m * edge * args.ps
      # The cubes are elongated along y axis.
      cube[::2, :] /= 3

      mesh = Mesh(cube, traj_x, orientation=geom.Y_AX)
      mesh_2 = Mesh(cube, traj_y, orientation=geom.Y_AX)
      mesh_3 = Mesh(cube, traj_xy, orientation=geom.Y_AX)
      mesh_stationary = Mesh(cube, traj_stationary, orientation=geom.Y_AX)
      mesh_stationary_1 = Mesh(cube, traj_stationary_1, orientation=geom.Y_AX)
      mesh_stationary_2 = Mesh(cube, traj_stationary_2, orientation=geom.Y_AX)
      bodies = [mesh, mesh_2, mesh_3, mesh_stationary, mesh_stationary_1, mesh_stationary_2]
      composite = CompositeBody(traj_circle, bodies=bodies, orientation=geom.Y_AX)
      composite.bind_trajectory(args.ps)

      total_time = composite.time
      if args.t is None:
          times = np.linspace(0, 1, 100)
      else:
          if args.t < 0 or args.t > 1:
              raise ValueError("--t must be in the range [0, 1]")
          times = [args.t]

      im = None
      for index, i in enumerate(times):
          t = i * total_time
          composite.clear_transformation()
          composite.move(t)
          p = composite.project(args.shape, args.ps).get()
          if im is None:
              im = show(p, title="Projection")
          else:
              im.set_data(p)
              plt.draw()
      # plt.show()
      fig_fname = "complex_trajectory.png"
      plt.savefig(fig_fname)

      return fig_fname

      
      
  def main():
      """ Main function """
      from collections import namedtuple
      Args = namedtuple("args", ['n', 'shape', 'ps', 't'])

      args = Args(n=512, shape=(512, 512), ps=1*q.um, t=0)

      syris.init(device_index=0)
      fig_fname = make_complex_trajectory_sequence(args)

      return fig_fname


      
  main()
#+end_src

#+RESULTS:
[[file:/sshx:deepbio:/home/grotec/Repositories/XPCISims4HHeDemixing/complex_trajectory.png]]
#+begin_src python 
      # parser = get_default_parser(__doc__)
      # subparsers = parser.add_subparsers(help="sub-command help", dest="sub-commands", required=False)
      # manual = subparsers.add_parser("manual", help="Manual positioning via simple transformations")
      # trajectory = subparsers.add_parser("trajectory", help="Automatic positioning via trajectories")
      # subtrajectories = subparsers.add_parser(
      #     "subtrajectories", help="Automatic positioning with " "local sub-body trajectories"
      # )
      # manual.set_defaults(_func=make_manual_sequence)
      # trajectory.set_defaults(_func=make_trajectory_sequence)

      # subtrajectories.add_argument(
      #     "--t",
      #     type=float,
      #     help="Time at which to compute the projection normalized to "
      #     "[0, 1], if not specified, complete sequence is shown",
      # )
      # subtrajectories.set_defaults(_func=make_complex_trajectory_sequence)

      # args = parser.parse_args()

      # # Set constants
      # args.n = 512
      # args.shape = (args.n, args.n)
      # args.ps = 1 * q.um

      # args._func(args)


  # if __name__ == "__main__":
      # main()
#+end_src

#+RESULTS:
: /sshx:deepbio:/tmp/python-tJyiQ6

#+begin_src python
  from collections import namedtuple
  Args = namedtuple("args", ['n', 'shape', 'ps'])
  
  args = Args(n=512, shape=(512, 512), ps=1*q.um)
  make_manual_sequence(args)
#+end_src
#+RESULTS:
: /sshx:deepbio:/tmp/python-kfp41y

#+end_src

** Mesh example
:PROPERTIES:
:ID:       af72b6d5-f5de-4ee9-a01a-fae1418b7169
:END:
#+begin_src python
    
  # Copyright (C) 2013-2023 Karlsruhe Institute of Technology
  #
  # This file is part of syris.
  #
  # This library is free software: you can redistribute it and/or
  # modify it under the terms of the GNU Lesser General Public
  # License as published by the Free Software Foundation, either
  # version 3 of the License, or (at your option) any later version.
  #
  # This library is distributed in the hope that it will be useful,
  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  # Lesser General Public License for more details.
  #
  # You should have received a copy of the GNU Lesser General Public
  # License along with this library. If not, see <http://www.gnu.org/licenses/>.

  """Mesh projection and slice."""
  import imageio
  import logging
  import time
  import matplotlib.pyplot as plt
  import numpy as np
  import quantities as q
  import syris
  import syris.geometry as geom
  import tqdm
  from syris.bodies.mesh import Mesh, make_cube, read_blender_obj

  from collections import namedtuple

  LOG = logging.getLogger(__name__)


  def main():
      """Main function."""
      args = parse_args()
      syris.init(loglevel=logging.INFO, double_precision=args.double_precision)
      units = q.Quantity(1, args.units)
      triangles = make_cube().magnitude if args.input is None else read_blender_obj(args.input)
      triangles = triangles * units
      tr = geom.Trajectory([(0, 0, 0)] * units)
      mesh = Mesh(triangles, tr, center=args.center, iterations=args.supersampling)
      LOG.info("Number of triangles: {}".format(mesh.num_triangles))

      shape = (args.n, args.n)
      if args.pixel_size is None:
          if args.input is None:
              fov = 4.0 * units
          else:
              # Maximum sample size in x and y direction
              max_diff = np.max(mesh.extrema[:-1, 1] - mesh.extrema[:-1, 0])
              fov = max_diff
          fov *= args.margin
          args.pixel_size = fov / args.n
      else:
          fov = args.n * args.pixel_size

      if args.translate is None:
          translate = (fov.simplified.magnitude / 2.0, fov.simplified.magnitude / 2.0, 0) * q.m
      else:
          translate = (
              args.translate[0].simplified.magnitude,
              args.translate[1].simplified.magnitude,
              0,
          ) * q.m
      LOG.info("Translation: {}".format(translate.rescale(q.um)))

      mesh.translate(translate)
      mesh.rotate(args.x_rotate, geom.X_AX)

      fmt = "n: {}, pixel size: {}, FOV: {}"
      LOG.info(fmt.format(args.n, args.pixel_size.rescale(q.um), fov.rescale(q.um)))
      st = time.time()
      for i in tqdm.tqdm(range(args.num_y_rotations)):
          proj = mesh.project(shape, args.pixel_size, t=None).get()
          if args.projection_filename is not None:
              imageio.imwrite(args.projection_filename + f"_{i:>05}.tif", proj)
          mesh.rotate(args.y_rotate, geom.Y_AX)

      LOG.info("Duration: {} s".format(time.time() - st))
      offset = (0, translate[1].simplified, -(fov / 2.0).simplified) * q.m

      if args.compute_slice:
          sl = mesh.compute_slices((1,) + shape, args.pixel_size, offset=offset).get()[0]
          if args.slice_filename is not None:
              imageio.imwrite(args.slice_filename, sl)
          show(sl, title="Slice at y = {}".format(args.n / 2))

      return proj
      # show(proj, title="Projection")
      # plt.show()


  def parse_args():
      """Parse command line arguments."""

      # parser.add_argument("--input", type=str, help="Input .obj file")
      # parser.add_argument("--units", type=str, default="um", help="Mesh physical units")
      # parser.add_argument("--n", type=int, default=256, help="Number of pixels")
      # parser.add_argument(
      #     "--supersampling", type=int, default=1, help="Supersampling for mesh computation"
      # )
      # parser.add_argument("--pixel-size", type=float, help="Pixel size in um")
      # parser.add_argument("--center", type=str, help="Mesh centering on creation")
      # parser.add_argument("--translate", type=float, nargs=2, help="Translation as (x, y) in um")
      # parser.add_argument("--x-rotate", type=float, default=0.0, help="Rotation around x axis [deg]")
      # parser.add_argument("--y-rotate", type=float, default=0.0, help="Rotation around y axis [deg]")
      # parser.add_argument(
      #     "--num-y-rotations",
      #     type=int,
      #     default=1,
      #     help="How many times rotate around y axis (tomography simulation)"
      # )
      # parser.add_argument(
      #     "--margin", type=float, default=1.0, help="Margin in factor of the full FOV"
      # )
      # parser.add_argument(
      #     "--projection-filename",
      #     type=str,
      #     help="Save projection to this filename prefix (.tif is appended)"
      # )
      # parser.add_argument("--compute-slice", action="store_true", help="Compute also one slice")
      # parser.add_argument("--slice-filename", type=str, help="Save slice to this filename")
      # parser.add_argument("--double-precision", action="store_true", help="Use double precision")
      Args = namedtuple("args", ['input',
                                 'units',
                                 'n',
                                 'supersampling',
                                 'pixel_size',
                                 'center',
                                 'translate',
                                 'x_rotate',
                                 'y_rotate',
                                 'num_y_rotations',
                                 'margin',
                                 'projection_filename',
                                 'compute_slice',
                                 'slice_filename',
                                 'double_precision',
                                 ]
                        )

      args = Args(input=None,
                  units='um',
                  n=256,
                  supersampling=1,
                  pixel_size=0.4*q.um,
                  center='bbox',
                  translate=(0,0)*q.um,
                  x_rotate=0*q.deg,
                  y_rotate=0*q.deg,
                  num_y_rotations=1,
                  margin=1.0,
                  projection_filename='projection',
                  compute_slice=False,
                  slice_filename=None,
                  double_precision=True
                  )


      return args

  image = main()
#+end_src

#+RESULTS:
: None
